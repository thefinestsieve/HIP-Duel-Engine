namespace = hde_core

# By AnaxXiphos
# Based on work by Galle (Gregory Hayes) and jordarkelf

### CONTEXT FLAGS
# Note that ALL duels are hostile (to the death) by default
# Set flag_duel_friendly if you don't want to kill folks
## Duel Type
# flag_duel_friendly
## Duel Flavor
# flag_duel_battlefield
# flag_duel_tourney (eventually?)

### MAIN EVENTS
# hde_core.0	Referee decides between FROM and FROMFROM, flags winner and loser, target locks duelists, starts dueling chain
# hde_core.1	Bounce event to make sure localization works properly

### HANDLER EVENTS
# These can call different flavor depending on the flavor flags
# hde_core.2	Initial handler, random flavor events, lets participants decide whether to run or not
# hde_core.3	Sizing Up handler, random flavor events
# hde_core.4	Sizing Up handler bounce event
# hde_core.5	Combat handler, random flavor events
# hde_core.6	Combat handler bounce event

### OUTCOME EVENTS
# The outcome event is fired from e_rebels due to requiring the AI weights in order to choose options
# hde_core.7	Outcome handler, random flavor events
# hde_core.8	Outcome handler bounce event
# hde_core.9	Cleanup handler, cleans up flags, traits, and opinion modifiers, also fires failure flavor

# Outcome types: Loser is outright killed, loser is wounded, loser is subdued. If loser is wounded or subdued, they may be captured, killed, or let go. If loser is wounded but refuses to yield, repeat the loop, but with odds against the loser? (And risk of getting maimed.) If loser is subdued but refuses to yield, they get wounded, then the loop is repeated as before.

# Question: How are we going to check for failure states? What if one of the characters dies for some other reason? We'll need a failure event ("You lost track of your opponent in the heat of battle" sort of thing)?
# Question: Will we need a safety catch cleanup event?

# I want to be able to mark characters so we know they're on their second or third trip through the loop
# This way the handlers can point them towards "tired" versions of flavor events

### FLAVOR EVENTS
# These are effectively mini-chains
# The events can bounce back and forth as much as you like, so long as it ends with the loser calling the handler on the winner, or with the winner calling the handler bounce event on the loser
# This is so the localization always works out properly
# But generally they'll be very short; don't want to be sending participants a forest of events
# These will actually appear in a different file, but for reference purposes:
# x.x	Initial flavor
# x.x	Sizing Up flavor
# x.x	Combat flavor
# x.x	Outcome flavor
# x.x	Failure flavor

### MAIN EVENTS
character_event = {
	id = hde_core.0
	# This might eventually be a hide_window = yes type event, but not for now
	desc = AI_EVENT
	picture = GFX_evt_duel0
	
	is_triggered_only = yes

	trigger = {
		has_landed_title = e_rebels
		# Probably should move everything below out of the event trigger and instead move it to the trigger of a special option which will fire failure and cleanup events
		FROM = { is_alive = yes }
		FROMFROM = { is_alive = yes }
		NOT = {
			OR = {
				FROM = { has_landed_title = e_rebels }
				FROMFROM = { has_landed_title = e_rebels }
			}
		}
	}
	
	immediate = {
		# Target Lock
		FROM = {
			add_trait = duel_target
		}
		FROMFROM = {
			add_trait = duel_target
			opinion = { who = FROM modifier = opinion_duel_target }
			reverse_opinion = { who = FROM modifier = opinion_duel_target }
		}
		# Randomize aggressor/defender
		random_list = {
			50 = {
				FROM = { set_character_flag = flag_duel_aggressor }
				FROMFROM = { set_character_flag = flag_duel_defender }
			}
			50 = {
				FROM = { set_character_flag = flag_duel_defender }
				FROMFROM = { set_character_flag = flag_duel_aggressor }
			}
		}
		# No flavor flag? Oh noes!
		if = {
			limit = {
				NOT = {
					OR = {
						FROM = { has_character_flag = flag_duel_battlefield }
						FROMFROM = { has_character_flag = flag_duel_battlefield }
						# Add new Duel Flavor flags here, for both FROM and FROMFROM
					}
				}
			}
			# Default to battlefield flavor for now
			FROM = { set_character_flag = flag_duel_battlefield }
			FROMFROM = { set_character_flag = flag_duel_battlefield }
		}
	}

	# FROM wins
	option = {
		name = AI_EVENT
		ai_chance = {
			factor = 50
			# Skill-at-Arms Effects
			modifier = {
				factor = 3
				FROM = { trait = poor_warrior }
			}
			modifier = {
				factor = 6
				FROM = { trait = trained_warrior }
			}
			modifier = {
				factor = 9
				FROM = { trait = skilled_warrior }
			}
			modifier = {
				factor = 12
				FROM = { trait = master_warrior }
			}
			# Martial Education Effects
			modifier = {
				factor = 1.5
				FROM = { trait = misguided_warrior }
			}
			modifier = {
				factor = 3
				FROM = { trait = tough_soldier }
			}
			modifier = {
				factor = 4.5
				FROM = { trait = skilled_tactician }
			}
			modifier = {
				factor = 6
				FROM = { trait = brilliant_strategist }
			}
			# Various Martial Skills		
			modifier = {
				factor = 3
				FROM = { trait = duelist }
			}
			# Martial Skill
			modifier = {
				factor = 1.1
				FROM = { martial = 10 }
				NOT = { FROM = { martial = 15 } }
			}
			modifier = {
				factor = 1.3
				FROM = { martial = 15 }
				NOT = { FROM = { martial = 20 } }
			}
			modifier = {
				factor = 1.5
				FROM = { martial = 20 }
			}
			# Physical Strength Effects
			modifier = {
				factor = 2
				FROM = { trait = strong }
			}
			modifier = {
				factor = 2
				FROMFROM = { trait = weak }
			}
			# Cunning/Intelligence Effects
			modifier = {
				factor = 2
				FROM = { trait = genius }
			}
			modifier = {
				factor = 1.5
				FROM = { trait = quick }
			}
			modifier = {
				factor = 2
				FROMFROM = { trait = imbecile }
			}
			modifier = {
				factor = 1.5
				FROMFROM = { trait = slow }
			}
			# Personality Effects
			modifier = {
				factor = 2
				FROM = { trait = brave }
			}
			modifier = {
				factor = 2
				FROM = { trait = wroth }
			}
			modifier = {
				factor = 2
				FROMFROM = { trait = craven }
			}
			modifier = {
				factor = 1.5
				FROM = { trait = deceitful }
			}
			modifier = {
				factor = 1.5
				FROMFROM = { trait = honest }
			}
			# Wound Effects
			modifier = {
				factor = 2
				FROMFROM = { trait = wounded }
			}
			modifier = {
				factor = 4
				FROMFROM = { trait = maimed }
			}
			modifier = {
				factor = 10
				FROMFROM = { trait = blinded }
			}
			modifier = {
				factor = 999999
				FROMFROM = { trait = incapable }
			}
			# Health Effects
			modifier = {
				factor = 1.5
				FROMFROM = { trait = ill }
			}
			modifier = {
				factor = 2
				FROMFROM = { trait = pneumonic }
			}
			modifier = {
				factor = 8
				FROMFROM = { trait = leper }
			}
			modifier = {
				factor = 4
				FROMFROM = { trait = infirm }
			}
			modifier = {
				factor = 6
				OR = {
					FROMFROM = { trait = has_tuberculosis }
					FROMFROM = { trait = has_typhoid_fever }
					FROMFROM = { trait = has_typhus }
					FROMFROM = { trait = has_bubonic_plague }
					FROMFROM = { trait = has_measles }
					FROMFROM = { trait = has_small_pox }
					FROMFROM = { trait = has_aztec_disease }
				}
			}
			# Body Shape Effects
			modifier = {
				factor = 1.5
				FROM = { trait = tall }
			}
			modifier = {
				factor = 1.5
				FROM = { trait = agile }
			}
			modifier = {
				factor = 1.5
				FROM = { trait = perceptive }
			}
			modifier = {
				factor = 1.5
				FROMFROM = { trait = absentminded }
			}
			modifier = {
				factor = 4
				FROMFROM = { trait = hunchback }
			}
			modifier = {
				factor = 4
				FROMFROM = { trait = dwarf }
			}
			modifier = {
				factor = 4
				FROMFROM = { trait = clubfooted }
			}
			modifier = {
				factor = 2
				OR = {
					FROM = { trait = lefthanded }
					FROM = { trait = ambidextrous }
				}
				NOT = { FROMFROM = { trait = lefthanded } }
				NOT = { FROMFROM = { trait = ambidextrous } }
			}
			# Age Effects
			modifier = {
				factor = 2
				NOT = { FROMFROM = { age = 16 } }
			}
			modifier = {
				factor = 2
				NOT = { FROMFROM = { age = 12 } }
			}
			modifier = {
				factor = 2
				NOT = { FROMFROM = { age = 8 } }
			}
			modifier = {
				factor = 2
				NOT = { FROMFROM = { age = 4 } }
			}
		}
		# Set flags and target lock
		FROM = {
			set_character_flag = flag_duel_winner
		}
		FROMFROM = {
			set_character_flag = flag_duel_loser
			character_event = { id = hde_core.1 }
		}
	}
	# FROMFROM wins
	option = {
		name = AI_EVENT
		ai_chance = {
			factor = 50
			# Skill-at-Arms Effects
			modifier = {
				factor = 3
				FROMFROM = { trait = poor_warrior }
			}
			modifier = {
				factor = 6
				FROMFROM = { trait = trained_warrior }
			}
			modifier = {
				factor = 9
				FROMFROM = { trait = skilled_warrior }
			}
			modifier = {
				factor = 12
				FROMFROM = { trait = master_warrior }
			}
			# Martial Education Effects
			modifier = {
				factor = 1.5
				FROMFROM = { trait = misguided_warrior }
			}
			modifier = {
				factor = 3
				FROMFROM = { trait = tough_soldier }
			}
			modifier = {
				factor = 4.5
				FROMFROM = { trait = skilled_tactician }
			}
			modifier = {
				factor = 6
				FROMFROM = { trait = brilliant_strategist }
			}
			# Various Martial Traits
			modifier = {
				factor = 3
				FROMFROM = { trait = duelist }
			}
			# Martial Skill
			modifier = {
				factor = 1.1
				FROMFROM = { martial = 10 }
				NOT = { FROMFROM = { martial = 15 } }
			}
			modifier = {
				factor = 1.3
				FROMFROM = { martial = 15 }
				NOT = { FROMFROM = { martial = 20 } }
			}
			modifier = {
				factor = 1.5
				FROMFROM = { martial = 20 }
			}
			# Physical Strength Effects
			modifier = {
				factor = 2
				FROMFROM = { trait = strong }
			}
			modifier = {
				factor = 2
				FROM = { trait = weak }
			}
			# Cunning/Intelligence Effects
			modifier = {
				factor = 2
				FROMFROM = { trait = genius }
			}
			modifier = {
				factor = 1.5
				FROMFROM = { trait = quick }
			}
			modifier = {
				factor = 2
				FROM = { trait = imbecile }
			}
			modifier = {
				factor = 1.5
				FROM = { trait = slow }
			}
			# Personality Effects
			modifier = {
				factor = 2
				FROMFROM = { trait = brave }
			}
			modifier = {
				factor = 2
				FROMFROM = { trait = wroth }
			}
			modifier = {
				factor = 2
				FROM = { trait = craven }
			}
			modifier = {
				factor = 1.5
				FROMFROM = { trait = deceitful }
			}
			modifier = {
				factor = 1.5
				FROM = { trait = honest }
			}
			# Wound Effects
			modifier = {
				factor = 2
				FROM = { trait = wounded }
			}
			modifier = {
				factor = 4
				FROM = { trait = maimed }
			}
			modifier = {
				factor = 999999
				FROM = { trait = incapable }
			}
			# Health Effects
			modifier = {
				factor = 1.5
				FROM = { trait = ill }
			}
			modifier = {
				factor = 2
				FROM = { trait = pneumonic }
			}
			modifier = {
				factor = 8
				FROM = { trait = leper }
			}
			modifier = {
				factor = 4
				FROM = { trait = infirm }
			}
			modifier = {
				factor = 6
				OR = {
					FROM = { trait = has_tuberculosis }
					FROM = { trait = has_typhoid_fever }
					FROM = { trait = has_typhus }
					FROM = { trait = has_bubonic_plague }
					FROM = { trait = has_measles }
					FROM = { trait = has_small_pox }
					FROM = { trait = has_aztec_disease }
				}
			}
			modifier = {
				factor = 10
				FROM = { trait = blinded }
			}
			# Body Shape Effects
			modifier = {
				factor = 1.5
				FROMFROM = { trait = tall }
			}
			modifier = {
				factor = 1.5
				FROMFROM = { trait = agile }
			}
			modifier = {
				factor = 1.5
				FROMFROM = { trait = perceptive }
			}
			modifier = {
				factor = 1.5
				FROM = { trait = absentminded }
			}
			modifier = {
				factor = 4
				FROM = { trait = hunchback }
			}
			modifier = {
				factor = 4
				FROM = { trait = dwarf }
			}
			modifier = {
				factor = 4
				FROM = { trait = clubfooted }
			}
			modifier = {
				factor = 2
				OR = {
					FROMFROM = { trait = lefthanded }
					FROMFROM = { trait = ambidextrous }
				}
				NOT = { FROM = { trait = lefthanded } }
				NOT = { FROM = { trait = ambidextrous } }
			}
			# Age Effects
			modifier = {
				factor = 2
				NOT = { FROM = { age = 16 } }
			}
			modifier = {
				factor = 2
				NOT = { FROM = { age = 12 } }
			}
			modifier = {
				factor = 2
				NOT = { FROM = { age = 8 } }
			}
			modifier = {
				factor = 2
				NOT = { FROM = { age = 4 } }
			}
		}
		# Set flags and target lock
		FROM = {
			set_character_flag = flag_duel_loser
			character_event = { id = hde_core.1 }
		}
		FROMFROM = {
			set_character_flag = flag_duel_winner
		}
	}
}

# Bounce event so the scopes work properly
character_event = {
	id = hde_core.1
	hide_window = yes
	
	is_triggered_only = yes
	
	immediate = {
		duel_target = {
			limit = {
				has_opinion_modifier = { who = ROOT modifier = opinion_duel_target }
				has_character_flag = flag_duel_winner
			}
			character_event = { id = hde_core.2 }
		}
	}
	
	option = {
		name = OK
	}
}

### HANDLER EVENTS
## Initial Handler
# Gives the duelists a chance to run away
# Winner = ROOT, loser = FROM
# These events can be sent to the winner or the loser
# If sent to the winner, the subsequent event will be winner (ROOT) and loser (FROMFROM)
# If sent to the loser, the subsequent event will be loser (ROOT) and winner (FROM)
character_event = {
	id = hde_core.2
	hide_window = yes
	
	is_triggered_only = yes
	
	immediate = {
		# Battlefield Flavor
		if = {
			limit = { has_character_flag = flag_duel_battlefield }
			# Winner is Aggressor
			if = {
				limit = { has_character_flag = flag_duel_aggressor }
				random_list = {
					50 = { character_event = { id = hde_battle.100 } }
					50 = { character_event = { id = hde_battle.100 } }
				}
			}
			# Loser is Aggressor
			if = {
				limit = { has_character_flag = flag_duel_defender }
				random_list = {
					50 = { FROM = { character_event = { id = hde_battle.101 } } }
					50 = { FROM = { character_event = { id = hde_battle.101 } } }
				}
			}
		}
		# Insert new flavor flag blocks here
	}
	
	option = { name = OK }
}

## Sizing Up Handler
# Winner = ROOT, loser = FROM
# These events can be sent to the winner or the loser
# If sent to the winner, the subsequent event will be winner (ROOT) and loser (FROMFROM)
# If sent to the loser, the subsequent event will be loser (ROOT) and winner (FROM)
character_event = {
	id = hde_core.3
	hide_window = yes
	
	is_triggered_only = yes
	
	immediate = {
		# Battlefield Flavor
		if = {
			limit = { has_character_flag = flag_duel_battlefield }
			# Winner is Aggressor
			if = {
				limit = { has_character_flag = flag_duel_aggressor }
				random_list = {
					50 = { character_event = { id = hde_battle.200 } }
					50 = { character_event = { id = hde_battle.200 } }
				}
			}
			# Loser is Aggressor
			if = {
				limit = { has_character_flag = flag_duel_defender }
				random_list = {
					50 = { FROM = { character_event = { id = hde_battle.201 } } }
					50 = { FROM = { character_event = { id = hde_battle.201 } } }
				}
			}
		}
		# Insert new flavor flag blocks here
	}
	
	option = { name = OK }
}
# Sizing Up Handler Bounce Event
character_event = {
	id = hde_core.4
	hide_window = yes
	
	is_triggered_only = yes
	
	immediate = {
		FROM = {
			character_event = { id = hde_core.3 }
		}
	}
	
	option = { name = OK }
}

## Combat Handler
# Winner = ROOT, loser = FROM
# These events can be sent to the winner or the loser
# If sent to the winner, the subsequent event will be winner (ROOT) and loser (FROMFROM)
# If sent to the loser, the subsequent event will be loser (ROOT) and winner (FROM)
character_event = {
	id = hde_core.5
	hide_window = yes
	
	is_triggered_only = yes
	
	immediate = {
		# Battlefield Flavor
		if = {
			limit = { has_character_flag = flag_duel_battlefield }
			# Winner is Aggressor
			if = {
				limit = { has_character_flag = flag_duel_aggressor }
				random_list = {
					50 = { character_event = { id = hde_battle.300 } }
					50 = { character_event = { id = hde_battle.300 } }
				}
			}
			# Loser is Aggressor
			if = {
				limit = { has_character_flag = flag_duel_defender }
				random_list = {
					50 = { FROM = { character_event = { id = hde_battle.301 } } }
					50 = { FROM = { character_event = { id = hde_battle.301 } } }
				}
			}
		}
		# Insert new flavor flag blocks here
	}
	
	option = { name = OK }
}
# Combat Handler Bounce Event
character_event = {
	id = hde_core.6
	hide_window = yes
	
	is_triggered_only = yes
	
	immediate = {
		FROM = {
			character_event = { id = hde_core.5 }
		}
	}
	
	option = { name = OK }
}

### OUTCOME EVENTS
# Outcome Handler: Always sent to e_rebels from the Loser
# FROM = Loser, FROMFROM = Winner
# Unlike other handlers, this always sends events to Winner who then passes them to Loser
# Events sent to Winner: FROMFROM = Loser
character_event = {
	id = hde_core.7
	hide_window = yes
	
	is_triggered_only = yes
	
	trigger = { has_landed_title = e_rebels }
	
	option = { # Subdued Opponent
		name = AI_EVENT
		ai_chance = {
			factor = 34
			# Needs Opponent Taken Alive
			modifier = {
				factor = 10
				FROMFROM = {
					OR = {
						any_current_enemy = { character = FROM }
						liege = { any_current_enemy = { character = FROM } }
					}
					NOT = {
						OR = {
							trait = lunatic
							trait = possessed
						}
					}
					NOT = {
						OR = {
							trait = wroth
							trait = cruel
							trait = paranoid
						}
					}
					NOT = { #republic feuders
						has_dynasty_flag = the_feuders
						FROM = { has_dynasty_flag = the_victims }
					}
					NOT = {
						has_dynasty_flag = the_victims
						FROM = { has_dynasty_flag = the_feuders }
					}
				}
			}
			# Personal Opinion Modifiers
			modifier = {
				factor = 1.25
				FROMFROM = { opinion = { who = FROM value = 10 } }
			}
			modifier = {
				factor = 1.25
				FROMFROM = { opinion = { who = FROM value = 20 } }
			}
			modifier = {
				factor = 1.25
				FROMFROM = { opinion = { who = FROM value = 30 } }
			}
			modifier = {
				factor = 1.25
				FROMFROM = { opinion = { who = FROM value = 40 } }
			}
			modifier = {
				factor = 1.25
				FROMFROM = { opinion = { who = FROM value = 50 } }
			}
			modifier = {
				factor = 1.25
				FROMFROM = { opinion = { who = FROM value = 60 } } 
			}
			modifier = {
				factor = 1.25
				FROMFROM = { opinion = { who = FROM value = 70 } }
			}
			modifier = {
				factor = 1.25
				FROMFROM = { opinion = { who = FROM value = 80 } }
			}
			modifier = {
				factor = 1.25
				FROMFROM = { opinion = { who = FROM value = 90 } }
			}
			modifier = {
				factor = 1.25
				FROMFROM = { opinion = { who = FROM value = 100 } }
			}
			modifier = {
				factor = 0.8
				NOT = { FROMFROM = { opinion = { who = FROM value = -9 } } }
			}
			modifier = {
				factor = 0.8
				NOT = { FROMFROM = { opinion = { who = FROM value = -19 } } }
			}
			modifier = {
				factor = 0.8
				NOT = { FROMFROM = { opinion = { who = FROM value = -29 } } }
			}
			modifier = {
				factor = 0.8
				NOT = { FROMFROM = { opinion = { who = FROM value = -39 } } }
			}
			modifier = {
				factor = 0.8
				NOT = { FROMFROM = { opinion = { who = FROM value = -49 } } }
			}
			modifier = {
				factor = 0.8
				NOT = { FROMFROM = { opinion = { who = FROM value = -59 } } }
			}
			modifier = {
				factor = 0.8
				NOT = { FROMFROM = { opinion = { who = FROM value = -69 } } }
			}
			modifier = {
				factor = 0.8
				NOT = { FROMFROM = { opinion = { who = FROM value = -79 } } }
			}
			modifier = {
				factor = 0.8
				NOT = { FROMFROM = { opinion = { who = FROM value = -89 } } }
			}
			modifier = {
				factor = 0.8
				NOT = { FROMFROM = { opinion = { who = FROM value = -99 } } }
			}
			# Trait Modifiers
			modifier = {
				factor = 2
				FROMFROM = { trait = just }
			}
		}
		# Remember, we always send outcome events to the Winner
		# Battlefield Flavor
		if = {
			limit = { has_character_flag = flag_duel_battlefield }
			# Winner is Aggressor
			if = {
				limit = { has_character_flag = flag_duel_aggressor }
				random_list = {
					50 = { character_event = { id = hde_battle.x } }
					50 = { character_event = { id = hde_battle.x } }
				}
			}
			# Winner is Defender
			if = {
				limit = { has_character_flag = flag_duel_defender }
				random_list = {
					50 = { character_event = { id = hde_battle.x } }
					50 = { character_event = { id = hde_battle.x } }
				}
			}
		}
	}
	
	option = { # Wounding Blow
		name = AI_EVENT
		ai_chance = {
			factor = 33
			modifier = {
				factor = 0.01
				FROMFROM = { has_character_flag = flag_duel_friendly }
			}
			modifier = {
				factor = 1.5
				FROMFROM = { trait = cruel }
			}
			modifier = {
				factor = 1.25
				FROMFROM = { trait = wroth }
			}
			modifier = {
				factor = 1.25
				FROM = { trait = brave }
			}
			modifier = {
				factor = 0.8
				FROMFROM = { trait = patient }
			}
			modifier = {
				factor = 0.5
				FROMFROM = { trait = kind }
			}
		}
		# Remember, we always send outcome events to the Winner
		# Winner is Aggressor
		if = {
			limit = { has_character_flag = flag_duel_aggressor }
			random_list = {
				50 = { character_event = { id = hde_battle.x } }
				50 = { character_event = { id = hde_battle.x } }
			}
		}
		# Winner is Defender
		if = {
			limit = { has_character_flag = flag_duel_defender }
			random_list = {
				50 = { character_event = { id = hde_battle.x } }
				50 = { character_event = { id = hde_battle.x } }
			}
		}
	}
	
	option = { # Killing Blow
		name = AI_EVENT
		ai_chance = {
			factor = 33
			modifier = {
				factor = 0.01
				FROMFROM = { has_character_flag = flag_duel_friendly }
			}
			# modifier = {
				# factor = 0.9
				# FROMFROM = { has_character_flag = flag_duel_tourney }
			# }
			modifier = {
				factor = 1.5
				FROMFROM = { trait = cruel }
			}
			modifier = {
				factor = 1.25
				FROMFROM = { trait = wroth }
			}
			modifier = {
				factor = 1.25
				FROM = { trait = brave }
			}
			modifier = {
				factor = 0.8
				FROMFROM = { trait = patient }
			}
			modifier = {
				factor = 0.5
				FROMFROM = { trait = kind }
			}
		}
		# call stuff here
	}
}

# Outcome Handler Bounce Event
character_event = {
	id = hde_core.8
	hide_window = yes
	
	is_triggered_only = yes
	
	immediate = {
		e_rebels = {
			holder_scope = {
				character_event = { id = hde_core.7 }
			}
		}
	}
	
	option = { name = OK }
}

# Cleanup Event
# One duelist sends this to the other, then it cleans up both
character_event = {
	id = hde_core.9
	hide_window = yes
	
	is_triggered_only = yes
	
	immediate = {
		FROM = {
			# Aggressor/Defender flags
			clr_character_flag = flag_duel_aggressor
			clr_character_flag = flag_duel_defender
			# Winner/Loser flags
			clr_character_flag = flag_duel_winner
			clr_character_flag = flag_duel_loser
			# Targeting stuff
			remove_trait = duel_target
			# Duel Flavor
			clr_character_flag = flag_duel_friendly
			# Duel Type
			clr_character_flag = flag_duel_battlefield
			# Add new Duel Type flags here
		}
		# Aggressor/Defender flags
		clr_character_flag = flag_duel_aggressor
		clr_character_flag = flag_duel_defender
		# Winner/Loser flags
		clr_character_flag = flag_duel_winner
		clr_character_flag = flag_duel_loser
		# Targeting stuff
		remove_trait = duel_target
		remove_opinion = { who = FROM modifier = opinion_duel_target }
		reverse_remove_opinion = { who = FROM modifier = opinion_duel_target }
		# Duel Flavor
		clr_character_flag = flag_duel_friendly
		# Duel Type
		clr_character_flag = flag_duel_battlefield
		# Add new Duel Type flags here
	}
	
	option = { name = OK }
}
