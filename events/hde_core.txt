namespace = hde_core

# By AnaxXiphos
# Based on work by Galle (Gregory Hayes) and jordarkelf

### CONTEXT FLAGS
## Duel Type
# flag_duel_friendly			reduces death outcomes by 99%, forces yield
# flag_duel_to_the_death		reduces yield outcomes by 100%
## Duel Flavor
# flag_duel_battlefield
# flag_duel_feast
# flag_duel_tourney (eventually)
# flag_duel_regent (eventually)
## Output flags
# flag_duel_spared_opponent
# flag_duel_wounded_opponent
# flag_duel_maimed_opponent
# flag_duel_incapacitated_opponent
# flag_duel_killed_opponent

### MAIN EVENTS
# hde_core.0	Stupid forwarder required due to issues with setting opinions in hde_core.1 (stupid FROMs in FROMFROM)
# hde_core.1	Referee decides between FROM and FROMFROM, flags winner and loser, target locks duelists, starts dueling chain
# hde_core.2	Bounce event to make sure localization works properly

### HANDLER EVENTS
# These can call different flavor depending on the flavor flags
# hde_core.3	Initial handler, random flavor events, lets participants decide whether to run or not
# hde_core.4	Sizing Up handler, random flavor events
# hde_core.5	Sizing Up handler bounce event
# hde_core.6	Combat handler, random flavor events
# hde_core.7	Combat handler bounce event

### OUTCOME EVENTS
# The outcome event is fired from e_rebels due to requiring the AI weights in order to choose options
# hde_core.8	Outcome handler, random flavor events
# hde_core.9	Outcome handler bounce event
# hde_core.10	Output handler
# hde_core.11	Cleanup handler

# Still TODO:
# Finish feast flavor
# Plug in regency duels
# Add flavor for regency duels
# Update the battlefield flavor (Locate it on the battlefield and change it to first person) (Should it also be changed to past tense? The rest of the game seems to fairly consistently use past tense.)
# Perhaps change to the red background version of the trait icons?
# Review battlefield duel targeting code

# Idea: Choosing how you deal with yields should have an effect on traits?

# Notes on tournament stuff:
# I'm no longer as worried about calling tournament flavor from inside the main events here, but that does depend on exactly what kind of functionality the tournament events end up needing.
# I also need to investigate whether I want to add the tournament version of the targeting trait. I'm currently leaning towards doing so just to avoid any potential issues.
# But much depends on what kind of model I embrace for the tournaments

### FLAVOR EVENTS
# These are effectively mini-chains
# The events can bounce back and forth as much as you like, so long as it ends with the loser calling the handler on the winner, or with the winner calling the handler bounce event on the loser
# This is so the localization always works out properly
# But generally they'll be very short; don't want to be sending participants a forest of events
# The exception is the outcome chains, which are written as one self-consistent chain. So when Chain 1 subdued is chosen, if the Loser doesn't yield, it refers to the Chain 1 wounded event. That same Chain 1 wounded event might be called more directly as part of the wounded outcome, and so forth.

# Some further thoughts on other flavor stuff:
# My current plan is to write specific flavor for every duel flavor option. While this has some drawbacks, I like the idea of being able to flavor text customized to the setting.
# Remember that some flavor sets will never be friendly, nor to the death (like battlefield), so certain assumptions can be made; while the tournament and practice sets will always be friendly; and the indoor set needs to be adaptable, so it should have different options flavor throughout (controlled with option triggers) and also different outcomes flavor depending on what type of duel it is.
# I'd also like customized options to reflect personality characteristics and such, so that patient characters won't be yelling and so forth


### MAIN EVENTS
# Hideous forwarder hack due to issues with setting the targeting opinions in the referee event
character_event = {
	id = hde_core.0
	hide_window = yes
	is_triggered_only = yes
	
	immediate = {
		# Target Lock
		add_trait = duel_target
		FROM = {
			add_trait = duel_target
			opinion = { who = ROOT modifier = opinion_duel_target }
			reverse_opinion = { who = ROOT modifier = opinion_duel_target }
		}
		e_rebels = { holder_scope = { character_event = { id = hde_core.1 } } }
	}
	
	option = { name = OK }
}
# Actual main event
character_event = {
	id = hde_core.1
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_landed_title = e_rebels
		# Probably should move everything below out of the event trigger and instead move it to the trigger of a special option which will fire failure and cleanup events
		# I also want to have the failure option fire a custom_tooltip event w/ special localization to the player for debugging purposes, so hopefully I can track down reasons for failure
		FROM = { is_alive = yes }
		FROMFROM = { is_alive = yes }
		NOT = {
			OR = {
				FROM = { has_landed_title = e_rebels }
				FROMFROM = { has_landed_title = e_rebels }
			}
		}
	}
	
	immediate = {
		# Test Block
		FROM = { set_character_flag = core1FROM }
		FROMFROM = { set_character_flag = core1FROMFROM }
		# Already been through the loop? Clear those flags!
		FROM = {
			clr_character_flag = flag_duel_aggressor
			clr_character_flag = flag_duel_defender
			clr_character_flag = flag_duel_winner
			clr_character_flag = flag_duel_loser
		}
		FROMFROM = {
			clr_character_flag = flag_duel_aggressor
			clr_character_flag = flag_duel_defender
			clr_character_flag = flag_duel_winner
			clr_character_flag = flag_duel_loser
		}
		# Randomize aggressor/defender
		random_list = {
			50 = {
				FROM = { set_character_flag = flag_duel_aggressor }
				FROMFROM = { set_character_flag = flag_duel_defender }
			}
			50 = {
				FROM = { set_character_flag = flag_duel_defender }
				FROMFROM = { set_character_flag = flag_duel_aggressor }
			}
		}
	}

	# Need to add special options here if there's a failure state
	# FROM wins
	option = {
		name = OK
		ai_chance = {
			factor = 50
			# Skill-at-Arms Effects
			modifier = {
				factor = 3
				FROM = { trait = poor_warrior }
			}
			modifier = {
				factor = 6
				FROM = { trait = trained_warrior }
			}
			modifier = {
				factor = 9
				FROM = { trait = skilled_warrior }
			}
			modifier = {
				factor = 12
				FROM = { trait = master_warrior }
			}
			# Martial Education Effects
			modifier = {
				factor = 1.5
				FROM = { trait = misguided_warrior }
			}
			modifier = {
				factor = 3
				FROM = { trait = tough_soldier }
			}
			modifier = {
				factor = 4.5
				FROM = { trait = skilled_tactician }
			}
			modifier = {
				factor = 6
				FROM = { trait = brilliant_strategist }
			}
			# Various Martial Skills		
			modifier = {
				factor = 3
				FROM = { trait = duelist }
			}
			# Martial Skill
			modifier = {
				factor = 1.1
				FROM = { martial = 10 }
				NOT = { FROM = { martial = 15 } }
			}
			modifier = {
				factor = 1.3
				FROM = { martial = 15 }
				NOT = { FROM = { martial = 20 } }
			}
			modifier = {
				factor = 1.5
				FROM = { martial = 20 }
			}
			# Physical Strength Effects
			modifier = {
				factor = 2
				FROM = { trait = strong }
			}
			modifier = {
				factor = 2
				FROMFROM = { trait = weak }
			}
			# Cunning/Intelligence Effects
			modifier = {
				factor = 2
				FROM = { trait = genius }
			}
			modifier = {
				factor = 1.5
				FROM = { trait = quick }
			}
			modifier = {
				factor = 2
				FROMFROM = { trait = imbecile }
			}
			modifier = {
				factor = 1.5
				FROMFROM = { trait = slow }
			}
			# Personality Effects
			modifier = {
				factor = 2
				FROM = { trait = brave }
			}
			modifier = {
				factor = 2
				FROM = { trait = wroth }
			}
			modifier = {
				factor = 2
				FROMFROM = { trait = craven }
			}
			modifier = {
				factor = 1.5
				FROM = { trait = deceitful }
			}
			modifier = {
				factor = 1.5
				FROMFROM = { trait = honest }
			}
			# Wound Effects
			modifier = {
				factor = 2
				FROMFROM = { trait = wounded }
			}
			modifier = {
				factor = 4
				FROMFROM = { trait = maimed }
			}
			modifier = {
				factor = 10
				FROMFROM = { trait = blinded }
			}
			modifier = {
				factor = 999999
				FROMFROM = { trait = incapable }
			}
			# Health Effects
			modifier = {
				factor = 1.5
				FROMFROM = { trait = ill }
			}
			modifier = {
				factor = 2
				FROMFROM = { trait = pneumonic }
			}
			modifier = {
				factor = 8
				FROMFROM = { trait = leper }
			}
			modifier = {
				factor = 4
				FROMFROM = { trait = infirm }
			}
			modifier = {
				factor = 6
				OR = {
					FROMFROM = { trait = has_tuberculosis }
					FROMFROM = { trait = has_typhoid_fever }
					FROMFROM = { trait = has_typhus }
					FROMFROM = { trait = has_bubonic_plague }
					FROMFROM = { trait = has_measles }
					FROMFROM = { trait = has_small_pox }
					FROMFROM = { trait = has_aztec_disease }
				}
			}
			# Body Shape Effects
			modifier = {
				factor = 1.5
				FROM = { trait = tall }
			}
			modifier = {
				factor = 1.5
				FROM = { trait = agile }
			}
			modifier = {
				factor = 1.5
				FROM = { trait = perceptive }
			}
			modifier = {
				factor = 1.5
				FROMFROM = { trait = absentminded }
			}
			modifier = {
				factor = 4
				FROMFROM = { trait = hunchback }
			}
			modifier = {
				factor = 4
				FROMFROM = { trait = dwarf }
			}
			modifier = {
				factor = 4
				FROMFROM = { trait = clubfooted }
			}
			modifier = {
				factor = 2
				OR = {
					FROM = { trait = lefthanded }
					FROM = { trait = ambidextrous }
				}
				NOT = { FROMFROM = { trait = lefthanded } }
				NOT = { FROMFROM = { trait = ambidextrous } }
			}
			# Age Effects
			modifier = {
				factor = 2
				NOT = { FROMFROM = { age = 16 } }
			}
			modifier = {
				factor = 2
				NOT = { FROMFROM = { age = 12 } }
			}
			modifier = {
				factor = 2
				NOT = { FROMFROM = { age = 8 } }
			}
			modifier = {
				factor = 2
				NOT = { FROMFROM = { age = 4 } }
			}
		}
		# Set flags
		FROM = {
			set_character_flag = flag_duel_winner
		}
		FROMFROM = {
			set_character_flag = flag_duel_loser
			character_event = { id = hde_core.2 }
		}
	}
	# FROMFROM wins
	option = {
		name = OK
		ai_chance = {
			factor = 50
			# Skill-at-Arms Effects
			modifier = {
				factor = 3
				FROMFROM = { trait = poor_warrior }
			}
			modifier = {
				factor = 6
				FROMFROM = { trait = trained_warrior }
			}
			modifier = {
				factor = 9
				FROMFROM = { trait = skilled_warrior }
			}
			modifier = {
				factor = 12
				FROMFROM = { trait = master_warrior }
			}
			# Martial Education Effects
			modifier = {
				factor = 1.5
				FROMFROM = { trait = misguided_warrior }
			}
			modifier = {
				factor = 3
				FROMFROM = { trait = tough_soldier }
			}
			modifier = {
				factor = 4.5
				FROMFROM = { trait = skilled_tactician }
			}
			modifier = {
				factor = 6
				FROMFROM = { trait = brilliant_strategist }
			}
			# Various Martial Traits
			modifier = {
				factor = 3
				FROMFROM = { trait = duelist }
			}
			# Martial Skill
			modifier = {
				factor = 1.1
				FROMFROM = { martial = 10 }
				NOT = { FROMFROM = { martial = 15 } }
			}
			modifier = {
				factor = 1.3
				FROMFROM = { martial = 15 }
				NOT = { FROMFROM = { martial = 20 } }
			}
			modifier = {
				factor = 1.5
				FROMFROM = { martial = 20 }
			}
			# Physical Strength Effects
			modifier = {
				factor = 2
				FROMFROM = { trait = strong }
			}
			modifier = {
				factor = 2
				FROM = { trait = weak }
			}
			# Cunning/Intelligence Effects
			modifier = {
				factor = 2
				FROMFROM = { trait = genius }
			}
			modifier = {
				factor = 1.5
				FROMFROM = { trait = quick }
			}
			modifier = {
				factor = 2
				FROM = { trait = imbecile }
			}
			modifier = {
				factor = 1.5
				FROM = { trait = slow }
			}
			# Personality Effects
			modifier = {
				factor = 2
				FROMFROM = { trait = brave }
			}
			modifier = {
				factor = 2
				FROMFROM = { trait = wroth }
			}
			modifier = {
				factor = 2
				FROM = { trait = craven }
			}
			modifier = {
				factor = 1.5
				FROMFROM = { trait = deceitful }
			}
			modifier = {
				factor = 1.5
				FROM = { trait = honest }
			}
			# Wound Effects
			modifier = {
				factor = 2
				FROM = { trait = wounded }
			}
			modifier = {
				factor = 4
				FROM = { trait = maimed }
			}
			modifier = {
				factor = 999999
				FROM = { trait = incapable }
			}
			# Health Effects
			modifier = {
				factor = 1.5
				FROM = { trait = ill }
			}
			modifier = {
				factor = 2
				FROM = { trait = pneumonic }
			}
			modifier = {
				factor = 8
				FROM = { trait = leper }
			}
			modifier = {
				factor = 4
				FROM = { trait = infirm }
			}
			modifier = {
				factor = 6
				OR = {
					FROM = { trait = has_tuberculosis }
					FROM = { trait = has_typhoid_fever }
					FROM = { trait = has_typhus }
					FROM = { trait = has_bubonic_plague }
					FROM = { trait = has_measles }
					FROM = { trait = has_small_pox }
					FROM = { trait = has_aztec_disease }
				}
			}
			modifier = {
				factor = 10
				FROM = { trait = blinded }
			}
			# Body Shape Effects
			modifier = {
				factor = 1.5
				FROMFROM = { trait = tall }
			}
			modifier = {
				factor = 1.5
				FROMFROM = { trait = agile }
			}
			modifier = {
				factor = 1.5
				FROMFROM = { trait = perceptive }
			}
			modifier = {
				factor = 1.5
				FROM = { trait = absentminded }
			}
			modifier = {
				factor = 4
				FROM = { trait = hunchback }
			}
			modifier = {
				factor = 4
				FROM = { trait = dwarf }
			}
			modifier = {
				factor = 4
				FROM = { trait = clubfooted }
			}
			modifier = {
				factor = 2
				OR = {
					FROMFROM = { trait = lefthanded }
					FROMFROM = { trait = ambidextrous }
				}
				NOT = { FROM = { trait = lefthanded } }
				NOT = { FROM = { trait = ambidextrous } }
			}
			# Age Effects
			modifier = {
				factor = 2
				NOT = { FROM = { age = 16 } }
			}
			modifier = {
				factor = 2
				NOT = { FROM = { age = 12 } }
			}
			modifier = {
				factor = 2
				NOT = { FROM = { age = 8 } }
			}
			modifier = {
				factor = 2
				NOT = { FROM = { age = 4 } }
			}
		}
		# Set flags
		FROM = {
			set_character_flag = flag_duel_loser
			character_event = { id = hde_core.2 }
		}
		FROMFROM = {
			set_character_flag = flag_duel_winner
		}
	}
}

# Bounce event off the Loser so the scopes work properly
character_event = {
	id = hde_core.2
	hide_window = yes
	is_triggered_only = yes
	
	immediate = {
		if = {
			limit = {
				NOT = { check_variable = { which = duel_rounds value = 1 } } # Round 1
			}
			# Testing block
			set_character_flag = core2LOSE
			duel_target = {
				limit = { has_opinion_modifier = { who = ROOT modifier = opinion_duel_target } }
				character_event = { id = hde_core.3 }
				# Testing Block
				set_character_flag = core2WIN
			}
		}
		if = {
			limit = { check_variable = { which = duel_rounds value = 1 } } # Round 2 or later
			# Testing block
			set_character_flag = core2LOSEtired
			duel_target = {
				limit = { has_opinion_modifier = { who = ROOT modifier = opinion_duel_target } }
				character_event = { id = hde_core.4 }
				# Testing Block
				set_character_flag = core2WINtired
			}
		}
	}
	
	option = { name = OK }
}

### HANDLER EVENTS
## Initial Handler
# Usually gives the duelists a chance to run away
# Winner = ROOT, loser = FROM
# These events can be sent to the winner or the loser
# If sent to the winner, the subsequent event will be winner (ROOT) and loser (FROMFROM)
# If sent to the loser, the subsequent event will be loser (ROOT) and winner (FROM)
character_event = {
	id = hde_core.3
	hide_window = yes
	is_triggered_only = yes
	
	immediate = {
		# Testing block
		set_character_flag = core3WIN
		FROM = { set_character_flag = core3LOSE }
		# Clear target lock
		FROM = { remove_trait = duel_target }
		remove_trait = duel_target
		remove_opinion = { who = FROM modifier = opinion_duel_target }
		reverse_remove_opinion = { who = FROM modifier = opinion_duel_target }
		# Battlefield Flavor
		if = {
			limit = { has_character_flag = flag_duel_battlefield }
			if = { # Winner is Aggressor
				limit = { has_character_flag = flag_duel_aggressor }
				random_list = {
					50 = { character_event = { id = hde_battle.100 } } # Chain 1
					50 = { character_event = { id = hde_battle.100 } } # Chain 1
					# Add new flavor events here. Make sure to adjust weights!
				}
			}
			if = { # Loser is Aggressor
				limit = { has_character_flag = flag_duel_defender }
				random_list = {
					50 = { FROM = { character_event = { id = hde_battle.101 } } } # Chain 1
					50 = { FROM = { character_event = { id = hde_battle.101 } } } # Chain 1
					# Add new flavor events here. Make sure to adjust weights!
				}
			}
		}
		# Feast Flavor
		if = {
			limit = { has_character_flag = flag_duel_feast }
			if = { # Winner is Aggressor
				limit = { has_character_flag = flag_duel_aggressor }
				random_list = {
					50 = { character_event = { id = hde_feast.100 } } # Chain 1
					50 = { character_event = { id = hde_feast.100 } } # Chain 1
					# Add new flavor events here. Make sure to adjust weights!
				}
			}
			if = { # Loser is Aggressor
				limit = { has_character_flag = flag_duel_defender }
				random_list = {
					50 = { FROM = { character_event = { id = hde_feast.101 } } } # Chain 1
					50 = { FROM = { character_event = { id = hde_feast.101 } } } # Chain 1
					# Add new flavor events here. Make sure to adjust weights!
				}
			}
		}
		# Insert new flavor flag blocks here
	}
	
	option = { name = OK }
}

## Sizing Up Handler
# Winner = ROOT, loser = FROM
# These events can be sent to the winner or the loser
# If sent to the winner, the subsequent event will be winner (ROOT) and loser (FROMFROM)
# If sent to the loser, the subsequent event will be loser (ROOT) and winner (FROM)
character_event = {
	id = hde_core.4
	hide_window = yes
	is_triggered_only = yes
	
	immediate = {
		# Testing block
		set_character_flag = core4WIN
		FROM = { set_character_flag = core4LOSE }
		# Battlefield Flavor
		if = {
			limit = { has_character_flag = flag_duel_battlefield }
			if = { # Round 1 Flavor
				limit = {
					NOT = { check_variable = { which = duel_rounds value = 1 } } # Round 1
				}
				if = { # Winner is Aggressor
					limit = { has_character_flag = flag_duel_aggressor }
					random_list = {
						50 = { character_event = { id = hde_battle.200 } } # Chain 1
						50 = { character_event = { id = hde_battle.200 } } # Chain 1
						# Add new flavor events here. Make sure to adjust weights!
					}
				}
				if = { # Loser is Aggressor
					limit = { has_character_flag = flag_duel_defender }
					random_list = {
						50 = { FROM = { character_event = { id = hde_battle.201 } } } # Chain 1
						50 = { FROM = { character_event = { id = hde_battle.201 } } } # Chain 1
						# Add new flavor events here. Make sure to adjust weights!
					}
				}
			}
			if = { # Round 2 Flavor
				limit = {
					check_variable = { which = duel_rounds value = 1 } # Round 2
					NOT = { check_variable = { which = duel_rounds value = 2 } }
				}
				if = { # Winner is Aggressor
					limit = { has_character_flag = flag_duel_aggressor }
					random_list = {
						50 = { character_event = { id = hde_battle.203 } } # Chain 1
						50 = { character_event = { id = hde_battle.203 } } # Chain 1
						# Add new flavor events here. Make sure to adjust weights!
					}
				}
				if = { # Loser is Aggressor
					limit = { has_character_flag = flag_duel_defender }
					random_list = {
						50 = { FROM = { character_event = { id = hde_battle.204 } } } # Chain 1
						50 = { FROM = { character_event = { id = hde_battle.204 } } } # Chain 1
						# Add new flavor events here. Make sure to adjust weights!
					}
				}
			}
			if = { # Round 3 Flavor
				limit = {
					check_variable = { which = duel_rounds value = 2 } # Round 3 or later
				}
				if = { # Winner is Aggressor
					limit = { has_character_flag = flag_duel_aggressor }
					random_list = {
						50 = { character_event = { id = hde_battle.206 } } # Chain 1
						50 = { character_event = { id = hde_battle.206 } } # Chain 1
						# Add new flavor events here. Make sure to adjust weights!
					}
				}
				if = { # Loser is Aggressor
					limit = { has_character_flag = flag_duel_defender }
					random_list = {
						50 = { FROM = { character_event = { id = hde_battle.207 } } } # Chain 1
						50 = { FROM = { character_event = { id = hde_battle.207 } } } # Chain 1
						# Add new flavor events here. Make sure to adjust weights!
					}
				}
			}
		}
		# Feast Flavor
		if = {
			limit = { has_character_flag = flag_duel_feast }
			if = { # Round 1 Flavor
				limit = {
					NOT = { check_variable = { which = duel_rounds value = 1 } } # Round 1
				}
				if = { # Winner is Aggressor
					limit = { has_character_flag = flag_duel_aggressor }
					random_list = {
						50 = { character_event = { id = hde_feast.200 } } # Chain 1
						50 = { character_event = { id = hde_feast.200 } } # Chain 1
						# Add new flavor events here. Make sure to adjust weights!
					}
				}
				if = { # Loser is Aggressor
					limit = { has_character_flag = flag_duel_defender }
					random_list = {
						50 = { FROM = { character_event = { id = hde_feast.201 } } } # Chain 1
						50 = { FROM = { character_event = { id = hde_feast.201 } } } # Chain 1
						# Add new flavor events here. Make sure to adjust weights!
					}
				}
			}
			if = { # Round 2 Flavor
				limit = {
					check_variable = { which = duel_rounds value = 1 } # Round 2
					NOT = { check_variable = { which = duel_rounds value = 2 } }
				}
				if = { # Winner is Aggressor
					limit = { has_character_flag = flag_duel_aggressor }
					random_list = {
						50 = { character_event = { id = hde_feast.203 } } # Chain 1
						50 = { character_event = { id = hde_feast.203 } } # Chain 1
						# Add new flavor events here. Make sure to adjust weights!
					}
				}
				if = { # Loser is Aggressor
					limit = { has_character_flag = flag_duel_defender }
					random_list = {
						50 = { FROM = { character_event = { id = hde_feast.204 } } } # Chain 1
						50 = { FROM = { character_event = { id = hde_feast.204 } } } # Chain 1
						# Add new flavor events here. Make sure to adjust weights!
					}
				}
			}
			if = { # Round 3 Flavor
				limit = {
					check_variable = { which = duel_rounds value = 2 } # Round 3 or later
				}
				if = { # Winner is Aggressor
					limit = { has_character_flag = flag_duel_aggressor }
					random_list = {
						50 = { character_event = { id = hde_feast.206 } } # Chain 1
						50 = { character_event = { id = hde_feast.206 } } # Chain 1
						# Add new flavor events here. Make sure to adjust weights!
					}
				}
				if = { # Loser is Aggressor
					limit = { has_character_flag = flag_duel_defender }
					random_list = {
						50 = { FROM = { character_event = { id = hde_feast.207 } } } # Chain 1
						50 = { FROM = { character_event = { id = hde_feast.207 } } } # Chain 1
						# Add new flavor events here. Make sure to adjust weights!
					}
				}
			}
		}
		# Insert new flavor flag blocks here
	}
	
	option = { name = OK }
}
# Sizing Up Handler Bounce Event
character_event = {
	id = hde_core.5
	hide_window = yes
	is_triggered_only = yes
	
	immediate = {
		FROM = {
			character_event = { id = hde_core.4 }
		}
	}
	
	option = { name = OK }
}

## Combat Handler
# Winner = ROOT, loser = FROM
# These events can be sent to the winner or the loser
# If sent to the winner, the subsequent event will be winner (ROOT) and loser (FROMFROM)
# If sent to the loser, the subsequent event will be loser (ROOT) and winner (FROM)
character_event = {
	id = hde_core.6
	hide_window = yes
	is_triggered_only = yes
	
	immediate = {
		# Testing block
		set_character_flag = core6WIN
		FROM = { set_character_flag = core6LOSE }
		# Battlefield Flavor
		if = {
			limit = { has_character_flag = flag_duel_battlefield }
			# Winner is Aggressor
			if = {
				limit = { has_character_flag = flag_duel_aggressor }
				random_list = {
					50 = { character_event = { id = hde_battle.300 } } # Chain 1
					50 = { character_event = { id = hde_battle.300 } } # Chain 1
					# Add new flavor events here. Make sure to adjust weights!
				}
			}
			# Loser is Aggressor
			if = {
				limit = { has_character_flag = flag_duel_defender }
				random_list = {
					50 = { FROM = { character_event = { id = hde_battle.301 } } } # Chain 1
					50 = { FROM = { character_event = { id = hde_battle.301 } } } # Chain 1
					# Add new flavor events here. Make sure to adjust weights!
				}
			}
		}
		# Feast Flavor
		if = {
			limit = { has_character_flag = flag_duel_feast }
			# Winner is Aggressor
			if = {
				limit = { has_character_flag = flag_duel_aggressor }
				random_list = {
					50 = { character_event = { id = hde_feast.300 } } # Chain 1
					50 = { character_event = { id = hde_feast.300 } } # Chain 1
					# Add new flavor events here. Make sure to adjust weights!
				}
			}
			# Loser is Aggressor
			if = {
				limit = { has_character_flag = flag_duel_defender }
				random_list = {
					50 = { FROM = { character_event = { id = hde_feast.301 } } } # Chain 1
					50 = { FROM = { character_event = { id = hde_feast.301 } } } # Chain 1
					# Add new flavor events here. Make sure to adjust weights!
				}
			}
		}
		# Insert new flavor flag blocks here
	}
	
	option = { name = OK }
}
# Combat Handler Bounce Event
character_event = {
	id = hde_core.7
	hide_window = yes
	is_triggered_only = yes
	
	immediate = {
		FROM = {
			character_event = { id = hde_core.6 }
		}
	}
	
	option = { name = OK }
}

### OUTCOME EVENTS
## Outcome Handler: Always sent to e_rebels from the Loser
# FROM = Loser, FROMFROM = Winner
# Unlike other handlers, this always sends events to Winner who then passes them to Loser
# Events sent to Winner: FROMFROM = Loser
character_event = {
	id = hde_core.8
	hide_window = yes
	is_triggered_only = yes
	
	trigger = { has_landed_title = e_rebels }
	
	immediate = {
		FROM = { change_variable = { which = duel_rounds value = 1 } }
		FROMFROM = { change_variable = { which = duel_rounds value = 1 } }
		# Testing block
		FROM = { set_character_flag = core8LOSE }
		FROMFROM = { set_character_flag = core8WIN }
	}
	
	option = { # Subdued Opponent
		name = OK
		# The AI stuff here should really check the value of the opponent as a hostage, just in case it needs cash
		ai_chance = {
			factor = 34
			# Needs Opponent Taken Alive
			modifier = {
				factor = 10
				FROMFROM = {
					OR = {
						any_current_enemy = { character = FROM }
						liege = { any_current_enemy = { character = FROM } }
					}
					NOT = {
						OR = {
							trait = lunatic
							trait = possessed
						}
					}
					NOT = {
						OR = {
							trait = wroth
							trait = cruel
							trait = paranoid
						}
					}
					NOT = { #republic feuders
						has_dynasty_flag = the_feuders
						FROM = { has_dynasty_flag = the_victims }
					}
					NOT = {
						has_dynasty_flag = the_victims
						FROM = { has_dynasty_flag = the_feuders }
					}
				}
			}
			# Personal Opinion Modifiers
			modifier = {
				factor = 1.25
				FROMFROM = { opinion = { who = FROM value = 10 } }
			}
			modifier = {
				factor = 1.25
				FROMFROM = { opinion = { who = FROM value = 20 } }
			}
			modifier = {
				factor = 1.25
				FROMFROM = { opinion = { who = FROM value = 30 } }
			}
			modifier = {
				factor = 1.25
				FROMFROM = { opinion = { who = FROM value = 40 } }
			}
			modifier = {
				factor = 1.25
				FROMFROM = { opinion = { who = FROM value = 50 } }
			}
			modifier = {
				factor = 1.25
				FROMFROM = { opinion = { who = FROM value = 60 } } 
			}
			modifier = {
				factor = 1.25
				FROMFROM = { opinion = { who = FROM value = 70 } }
			}
			modifier = {
				factor = 1.25
				FROMFROM = { opinion = { who = FROM value = 80 } }
			}
			modifier = {
				factor = 1.25
				FROMFROM = { opinion = { who = FROM value = 90 } }
			}
			modifier = {
				factor = 1.25
				FROMFROM = { opinion = { who = FROM value = 100 } }
			}
			modifier = {
				factor = 0.8
				NOT = { FROMFROM = { opinion = { who = FROM value = -9 } } }
			}
			modifier = {
				factor = 0.8
				NOT = { FROMFROM = { opinion = { who = FROM value = -19 } } }
			}
			modifier = {
				factor = 0.8
				NOT = { FROMFROM = { opinion = { who = FROM value = -29 } } }
			}
			modifier = {
				factor = 0.8
				NOT = { FROMFROM = { opinion = { who = FROM value = -39 } } }
			}
			modifier = {
				factor = 0.8
				NOT = { FROMFROM = { opinion = { who = FROM value = -49 } } }
			}
			modifier = {
				factor = 0.8
				NOT = { FROMFROM = { opinion = { who = FROM value = -59 } } }
			}
			modifier = {
				factor = 0.8
				NOT = { FROMFROM = { opinion = { who = FROM value = -69 } } }
			}
			modifier = {
				factor = 0.8
				NOT = { FROMFROM = { opinion = { who = FROM value = -79 } } }
			}
			modifier = {
				factor = 0.8
				NOT = { FROMFROM = { opinion = { who = FROM value = -89 } } }
			}
			modifier = {
				factor = 0.8
				NOT = { FROMFROM = { opinion = { who = FROM value = -99 } } }
			}
			# Trait Modifiers
			modifier = {
				factor = 2
				FROMFROM = { trait = just }
			}
		}
		# Remember, we always send outcome events to the Winner, hence the FROMFROM scope
		# Battlefield Flavor
		if = {
			limit = { FROMFROM = { has_character_flag = flag_duel_battlefield } }
			# Winner is Aggressor
			if = {
				limit = { FROMFROM = { has_character_flag = flag_duel_aggressor } }
				random_list = {
					50 = { FROMFROM = { character_event = { id = hde_battle.400 } } } # Chain 1
					50 = { FROMFROM = { character_event = { id = hde_battle.400 } } } # Chain 1
					# Add new flavor events here. Make sure to adjust weights!
				}
			}
			# Winner is Defender
			if = {
				limit = { FROMFROM = { has_character_flag = flag_duel_defender } }
				random_list = {
					50 = { FROMFROM = { character_event = { id = hde_battle.401 } } } # Chain 1
					50 = { FROMFROM = { character_event = { id = hde_battle.401 } } } # Chain 1
					# Add new flavor events here. Make sure to adjust weights!
				}
			}
		}
		# Feast Flavor
		if = {
			limit = { FROMFROM = { has_character_flag = flag_duel_feast } }
			# Winner is Aggressor
			if = {
				limit = { FROMFROM = { has_character_flag = flag_duel_aggressor } }
				random_list = {
					50 = { FROMFROM = { character_event = { id = hde_feast.400 } } } # Chain 1
					50 = { FROMFROM = { character_event = { id = hde_feast.400 } } } # Chain 1
					# Add new flavor events here. Make sure to adjust weights!
				}
			}
			# Winner is Defender
			if = {
				limit = { FROMFROM = { has_character_flag = flag_duel_defender } }
				random_list = {
					50 = { FROMFROM = { character_event = { id = hde_feast.401 } } } # Chain 1
					50 = { FROMFROM = { character_event = { id = hde_feast.401 } } } # Chain 1
					# Add new flavor events here. Make sure to adjust weights!
				}
			}
		}
	}
	
	option = { # Wounding Blow
		name = OK
		ai_chance = {
			factor = 33
			modifier = {
				factor = 0.01
				FROMFROM = { has_character_flag = flag_duel_friendly }
			}
			modifier = {
				factor = 1.5
				FROMFROM = { trait = cruel }
			}
			modifier = {
				factor = 1.25
				FROMFROM = { trait = wroth }
			}
			modifier = {
				factor = 1.25
				FROM = { trait = brave }
			}
			modifier = {
				factor = 0.8
				FROMFROM = { trait = patient }
			}
			modifier = {
				factor = 0.5
				FROMFROM = { trait = kind }
			}
		}
		# Remember, we always send outcome events to the Winner, hence the FROMFROM scope
		# Battlefield Flavor
		if = {
			limit = { FROMFROM = { has_character_flag = flag_duel_battlefield } }
			# Winner is Aggressor
			if = {
				limit = { FROMFROM = { has_character_flag = flag_duel_aggressor } }
				random_list = {
					50 = { FROMFROM = { character_event = { id = hde_battle.500 } } } # Chain 1
					50 = { FROMFROM = { character_event = { id = hde_battle.500 } } } # Chain 1
					# Add new flavor events here. Make sure to adjust weights!
				}
			}
			# Winner is Defender
			if = {
				limit = { FROMFROM = { has_character_flag = flag_duel_defender } }
				random_list = {
					50 = { FROMFROM = { character_event = { id = hde_battle.501 } } } # Chain 1
					50 = { FROMFROM = { character_event = { id = hde_battle.501 } } } # Chain 1
					# Add new flavor events here. Make sure to adjust weights!
				}
			}
		}
	}
	
	option = { # Killing Blow
		name = OK
		ai_chance = {
			factor = 33
			modifier = {
				factor = 0.01
				FROMFROM = { has_character_flag = flag_duel_friendly }
			}
			# modifier = {
				# factor = 0.9
				# FROMFROM = { has_character_flag = flag_duel_tourney }
			# }
			modifier = {
				factor = 1.5
				FROMFROM = { trait = cruel }
			}
			modifier = {
				factor = 1.25
				FROMFROM = { trait = wroth }
			}
			modifier = {
				factor = 1.25
				FROM = { trait = brave }
			}
			modifier = {
				factor = 0.8
				FROMFROM = { trait = patient }
			}
			modifier = {
				factor = 0.5
				FROMFROM = { trait = kind }
			}
		}
		# Remember, we always send outcome events to the Winner, hence the FROMFROM scope
		# Battlefield Flavor
		if = {
			limit = { FROMFROM = { has_character_flag = flag_duel_battlefield } }
			# Winner is Aggressor
			if = {
				limit = { FROMFROM = { has_character_flag = flag_duel_aggressor } }
				random_list = {
					50 = { FROMFROM = { character_event = { id = hde_battle.600 } } } # Chain 1
					50 = { FROMFROM = { character_event = { id = hde_battle.600 } } } # Chain 1
					# Add new flavor events here. Make sure to adjust weights!
				}
			}
			# Winner is Defender
			if = {
				limit = { FROMFROM = { has_character_flag = flag_duel_defender } }
				random_list = {
					50 = { FROMFROM = { character_event = { id = hde_battle.601 } } } # Chain 1
					50 = { FROMFROM = { character_event = { id = hde_battle.601 } } } # Chain 1
					# Add new flavor events here. Make sure to adjust weights!
				}
			}
		}
	}
	
	# Add outcome for losing track of opponent in battle
	# Should be rare and limited to only certain types of flavor
}
# Outcome Handler Bounce Event
character_event = {
	id = hde_core.9
	hide_window = yes
	is_triggered_only = yes
	
	immediate = {
		e_rebels = {
			holder_scope = {
				character_event = { id = hde_core.8 }
			}
		}
	}
	
	option = { name = OK }
}

### OUTPUT EVENTS
## Output Handler
# This is always sent from the Loser to the Winner (FROM = Loser)
# Primary function is to hand out appropriate end of duel flavor and pass along events required to connect to non-HDE event chains
character_event = {
	id = hde_core.10
	hide_window = yes
	is_triggered_only = yes
	
	immediate = {
		# Testing block
		set_character_flag = core10WIN
		FROM = { set_character_flag = core10LOSE }
		# Battlefield Flavor
		if = {
			limit = { has_character_flag = flag_duel_battlefield }
			if = {
				limit = { has_character_flag = flag_duel_killed_opponent }
				random_list = {
					50 = { character_event = { id = hde_battle.700 } } # Chain 1
					50 = { character_event = { id = hde_battle.700 } } # Chain 1
				}
			}
			if = {
				limit = { has_character_flag = flag_duel_spared_opponent }
				random_list = {
					50 = { character_event = { id = hde_battle.701 } } # Chain 1
					50 = { character_event = { id = hde_battle.701 } } # Chain 1
				}
			}
			if = {
				limit = { has_character_flag = flag_duel_incapacitated_opponent }
				random_list = {
					50 = { character_event = { id = hde_battle.703 } } # Chain 1
					50 = { character_event = { id = hde_battle.703 } } # Chain 1
				}
			}
		}
		# Feast Flavor
		if = {
			limit = { has_character_flag = flag_duel_feast }
			random_list = {
				50 = { character_event = { id = hde_feast.700 } } # Chain 1
				50 = { character_event = { id = hde_feast.700 } } # Chain 1
			}
		}
		# Insert additional flavor blocks here
		
		# CTA Victory forwarder
		FROM = { # Send bounce to Loser
			character_event = { id = cta.11 }
		}
		# Cleanup!
		character_event = { id = hde_core.11 }
	}
	
	option = { name = OK }
}

# Cleanup Event
# This only needs to be used directly in cases where the Output Handler isn't called instead
# Characters should send this to themselves in an event where FROM is the other duelist
character_event = {
	id = hde_core.11
	hide_window = yes
	is_triggered_only = yes
	
	immediate = {
		FROMFROM = {
			# Variable
			set_variable = { which = duel_rounds value = 0 }
			# Output flags
			clr_character_flag = flag_duel_spared_opponent
			clr_character_flag = flag_duel_wounded_opponent
			clr_character_flag = flag_duel_maimed_opponent
			clr_character_flag = flag_duel_incapacitated_opponent
			clr_character_flag = flag_duel_killed_opponent
			# Aggressor/Defender flags
			clr_character_flag = flag_duel_aggressor
			clr_character_flag = flag_duel_defender
			# Winner/Loser flags
			clr_character_flag = flag_duel_winner
			clr_character_flag = flag_duel_loser
			# Round flags
			clr_character_flag = flag_duel_round_2
			# Duel Type
			clr_character_flag = flag_duel_friendly
			clr_character_flag = flag_duel_to_the_death
			# Duel Flavor
			clr_character_flag = flag_duel_battlefield
			clr_character_flag = flag_duel_feast
			# Add new Duel Type or Flavor flags here
		}
		FROM = {
			# Variable
			set_variable = { which = duel_rounds value = 0 }
			# Output flags
			clr_character_flag = flag_duel_spared_opponent
			clr_character_flag = flag_duel_wounded_opponent
			clr_character_flag = flag_duel_maimed_opponent
			clr_character_flag = flag_duel_incapacitated_opponent
			clr_character_flag = flag_duel_killed_opponent
			# Aggressor/Defender flags
			clr_character_flag = flag_duel_aggressor
			clr_character_flag = flag_duel_defender
			# Winner/Loser flags
			clr_character_flag = flag_duel_winner
			clr_character_flag = flag_duel_loser
			# Round flags
			clr_character_flag = flag_duel_round_2
			# Duel Type
			clr_character_flag = flag_duel_friendly
			clr_character_flag = flag_duel_to_the_death
			# Duel Flavor
			clr_character_flag = flag_duel_battlefield
			clr_character_flag = flag_duel_feast
			# Add new Duel Type or Flavor flags here
		}
		# Variable
		set_variable = { which = duel_rounds value = 0 }
		# Output flags
		clr_character_flag = flag_duel_spared_opponent
		clr_character_flag = flag_duel_wounded_opponent
		clr_character_flag = flag_duel_maimed_opponent
		clr_character_flag = flag_duel_incapacitated_opponent
		clr_character_flag = flag_duel_killed_opponent
		# Aggressor/Defender flags
		clr_character_flag = flag_duel_aggressor
		clr_character_flag = flag_duel_defender
		# Winner/Loser flags
		clr_character_flag = flag_duel_winner
		clr_character_flag = flag_duel_loser
		# Round flags
		clr_character_flag = flag_duel_round_2
		# Duel Type
		clr_character_flag = flag_duel_friendly
		clr_character_flag = flag_duel_to_the_death
		# Duel Flavor
		clr_character_flag = flag_duel_battlefield
		clr_character_flag = flag_duel_feast
		# Add new Duel Type or Flavor flags here
	}
	
	option = { name = OK }
}
